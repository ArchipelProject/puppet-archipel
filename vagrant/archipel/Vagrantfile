# -*- mode: ruby -*-
# vi: set ft=ruby :

VAGRANTFILE_API_VERSION = "2"

require 'ipaddr'

domain = 'archipel.priv'
network = IPAddr.new '192.168.122.0/24'
range = network.to_range.to_a
cidr = (32-(Math.log(range.length)/Math.log(2))).to_i
netmask = IPAddr.new('255.255.255.255').mask(cidr).to_s
# figure out which hosts are getting provisioned
provision = ARGV.select { |x| !x.start_with?('-') }
if provision.length > 0 and ['up', 'provision'].include?(provision[0])
	provision.shift	# left over array provision should be list of hosts or []
	if provision.length == 0
		provision = true	# provision everything
	end
else
	provision = false		# provision nothing
end

#
#	ARGV parsing
#
projectdir = File.expand_path File.dirname(__FILE__)	# vagrant project dir!!



Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  config.vm.box = "centos-6"
  config.vm.box_url = 'https://download.gluster.org/pub/gluster/purpleidea/vagrant/centos-6/centos-6.box'

  #config.vm.synced_folder ".", "/vagrant", type: "nfs"
  if provision.is_a?(TrueClass) or (provision.is_a?(Array) and provision.include?(puppet_hostname))
    # ensure the archipel module is present for provisioning...
    cwd = `pwd`
    mod = File.join(projectdir, 'puppet', 'modules')
    `cd #{mod} && make archipel &> /dev/null; cd #{cwd}`
    #
    # change permissions of ArchipelAgent folder so that we can install
    archipel_dir = File.join(projectdir, 'Archipel')
    `cd #{archipel_dir} && chmod -R 777 ArchipelAgent &> /dev/null; cd #{cwd}`
  end



  config.vm.provision :puppet do |puppet|
    puppet.manifests_path = "puppet/manifests"
  end
  central_server_hostname = "central-server"
  config.vm.define :central_server, :primary => true do |central_server|
    central_server.vm.hostname = "#{central_server_hostname}.#{domain}"
    central_server.vm.network :private_network, :ip=> range[2].to_s,
      :libvirt__netmask => netmask,
      :libvirt__network_name => "default"
    central_server.vm.provision :puppet do |puppet|
      puppet.manifest_file = "archipel-central-server.pp"
      puppet.manifests_path = "puppet/manifests"
      puppet.module_path = "puppet/modules"
    end
    central_server.vm.provision 'shell', inline: 'puppet resource host localhost.localdomain ip=127.0.0.1 host_aliases=localhost'
    central_server.vm.provision 'shell', inline: "puppet resource host #{central_server_hostname} ensure=absent"  # so that fqdn works
    central_server.vm.provision 'shell', inline: "puppet resource host #{central_server_hostname}.#{domain} ip=#{range[2].to_s} ensure=present"
    (1..2).each do |i|
      central_server.vm.provision 'shell', inline: "puppet resource host agent-#{i}.#{domain} ip=#{range[2+i].to_s} ensure=present"
    end
  end
  (1..2).each do |i|
    config.vm.define "agent_#{i}" do |agent|
      agent.vm.hostname = "agent-#{i}.#{domain}"
      agent.vm.network :private_network, :ip=> range[2+i].to_s,
        :libvirt__netmask => netmask,
        :libvirt__network_name => "default"
      agent.vm.provision :puppet do |puppet|
        puppet.manifest_file = "archipel-hypervisor.pp"
        puppet.manifests_path = "puppet/manifests"
        puppet.module_path = "puppet/modules"
      end
      agent.vm.provision 'shell', inline: 'puppet resource host localhost.localdomain ip=127.0.0.1 host_aliases=localhost'
      agent.vm.provision 'shell', inline: "puppet resource host agent-#{i} ensure=absent"  # so that fqdn works
      agent.vm.provision 'shell', inline: "puppet resource host #{central_server_hostname}.#{domain} ip=#{range[2].to_s} ensure=present"
      (1..2).each do |i|
        agent.vm.provision 'shell', inline: "puppet resource host agent-#{i}.#{domain} ip=#{range[2+i].to_s} ensure=present"
      end
    end
  end
end
